module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    //output io_seg [8],      // 7-segment LEDs on IO Shield
    //output io_sel [4],      // Digit select on IO Shield
    //input io_button [5],    // 5 buttons on IO Shield
    input io_dip [8],     // DIP switches on IO Shield
    input write_addr[6],
    input write_data[16],
    input werf
    
  ) {
  
  sig rst;                  // reset signal
  
  data_memory data_mem(.waddr(write_addr), .write_data(write_data), .write_en(werf), .raddr(io_dip[5:0]),.clk(clk));
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    usb_tx = usb_rx;        // loop serial port
    
    led = 8h00;             // turn LEDs off
    
    io_led[0][7:6] = 2b00;
    io_led[0][5:0] = io_dip[5:0];
    io_led[2] = data_mem.read_data[15:8];
    io_led[1] = data_mem.read_data[7:0];
  }
}